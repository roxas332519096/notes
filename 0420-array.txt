不一致性:
Array(3)//生成长度为3,其他为空的数组，没有key，也没有value
Array(3,3) //生成长度为2，两项都是3，相当于[3,3]

------------------------------------

复杂类型Object,Array,Function加不加new都一样
基本类型number,String，Boolean不加new基本类型，加new对象

------------------------------------

具名函数
function f(){ }

匿名函数
var f = function (){ }

------------------------------------

遍历对象：

for(var i = 0;i<obj.length;i++){
  consloe.log(i) //打印下标
  console.log(obj[i]) //打印出值
}

for (var i in obj){
  console.log(i) //打印下标
  console.log(obj[i]) //打印出值
}
arguments
伪数组：原型链中没有Array.prototype的对象就是伪数组

------------------------------------

数组API

obj.forEach(function(value,key){ }) //forEach必须传入一个匿名函数，里面的函数必须传入两个参数，第一个是value值，第二个是key值,forEac去其实通过this来获取obj的.forEach没有返回值

------------------------------------

array.sort(function(x,y){return x-y或y-x}) //从大到小排列，从小到大排列

例子：var a = ['Tom','Tony','Jim'];
      hash = {'Tom':345,'Tony':987,'Jim':789}
      a.sort(function(x,y){return hash[x]-hash[y]或return hash[y]-hash[x]})
      将a按照hash值从小到大排列 

------------------------------------


a.join('') 把数值变成字符串，并且用''把各个值连接起来
a.join('')与a+ ''效果相同，都是将对象变成字符串

例子:

var a =['1','2','3']
a.join('+');
结果: '1+2+3'

------------------------------------

a.concat 连接多个数组，返回新的数值
例：
var b =['4','5','6']
var c = a.concat(b);
结果:['1','2','3','4','5','6']

也可以用concat复制一个数组，利用其返回新数组的特性
var d = a.concat([])

a === b //false

-----------------------------------
a.map(function(){})   //映射，有返回值，操作数组返回的值组成新的数值

例:

a.map(function(value,key){ retrun value*2})

等同于

a.map(value => value*2)

------------------------------
a.filter(function(value,key){return 条件}) //过滤，返回符合条件的新数组

例:
b=[1,2,3,4,5,6,7,8,9]
b.filter(function(value,key){return value >= 5}) 
//[5,6,7,8,9]

map与filter混合使用

a.filter(function(value,key){retrun value %2 ===0}).map(function(value){retrun value*value})
//先对a取偶的value，再对value进行平方


------------------------------------

a.reduce(function(a,b){},0) //遍历一个数组，取一个结果a，结果放在下一次遍历上,其中a为上次遍历结果，b为当前遍历数组的value，0为a的初始值

例子:
求和
 
a.reduce(fimctopm(sum,n){return sum+n},0)

例:
用reduce表示filter

a.reduce(function(arr,n){if(n%2===0){arr.push(n);}return arr;},[])

用reduce表示map

a.reduce(function(arr,n){arr.push(n*2);return arr;},[])