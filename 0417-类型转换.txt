.toString
str toString
null 报错
undefined 报错
object '{object object}'

+''功能跟String()一样
null+'' = 'null'
undefined + '' = 'undefined'

1+ 1 = 2
1 + '1' = '11'

1 .toString
2 String()
3 '1' +

转为布尔类型
Boolean()

五个fasly值
空字符串 false
null flase
undefined false
NaN false
0 false

空对象{}  true

任何东西取反两次得到其布尔值
!!1 true

1 Boolean()
2 !!1


转为number
1 Number('1') === 1
2 parseInt ('1',10) === 1
3 parseFloat ('1.23') === 1.23
4 '1' - 0 ===123
6 任何东西-0会得到其number值
  + '-1' === -1

内存图

你买一个 8G 的内存条
操作系统开机即占用 512MB
Chrome 打开即占用 1G 内存
Chrome 各每个网页分配一定数量的内存
这些内存要分给页面渲染器、网络模块、浏览器外壳和 JS 引擎（V8引擎）
JS 引擎将内存分为代码区和数据区
我们只研究数据区

var a = 1

a在代码区，1在数据区

stack 栈内存
Heap 堆内存

1.浏览器先对变量进行变量提升
2.基本类型数据保存在栈内存
2.1 当b = a 时，会在栈内存复制一份a，然后让b指向新的复制的数据
引用:(变量与对象的关系)
3.对象类型在栈内存上保存一个地址，地址指向堆内存，数据存在堆内存
3.1 当a是对象时，b = a，会在栈内存复制一份a的地址给b，让b指向原对象堆内存的位置

循环引用
var a = {}
a.self = a
a.self.self.self
self =a 里面存的是栈地址

垃圾回收
如果一个对象没有被引用，它就是垃圾，将被回收
例子
var a ={name:'a'}
var b ={name:'b'}
b =a 
那么{name:'a'}是垃圾

浅拷贝 b变影响a
var a ={name:'a'}
var b = a
b.name = 'b'
a.name //也是'b'
深拷贝 b不变影响a
例1：
var a =1
var b =a
b =2
a //1
例2:对Heap内存进行完全拷贝
var a = {name:'frank'}
var b = deepClone(a)
b.name = 'b'
a.name //frank



 